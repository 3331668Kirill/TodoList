{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","disabled","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","resultCode","item","messages","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f7bf39d.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '0b887150-9918-4354-a1e5-bd7a84ebf7a7'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\ntype AppActionType = ActionsTypeAppStatus | ActionsTypeAppError\r\nexport type ActionsTypeAppStatus = ReturnType<typeof setAppStatusAC>\r\nexport type ActionsTypeAppError = ReturnType<typeof setAppErrorAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    ActionsTypeAppError,\r\n    ActionsTypeAppStatus,\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppStatusAC\r\n} from \"../../app/app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all',entityStatus:'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all',entityStatus:'idle'}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n           return state.map(tl => tl.id === action.id ? {...tl, entityStatus:'idle'} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType | ActionsTypeAppStatus>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType | ActionsTypeAppStatus | ActionsTypeAppError>) => {\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                }else{\r\n                    dispatch(setAppStatusAC('failed'))\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\nexport const  changeTodoListEntityStatusAC = (id:string, entityStatus:RequestStatusType) =>{\r\n    return{\r\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n        id,\r\n        entityStatus\r\n\r\n    } as const\r\n}\r\n\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodoListEntityStatusAC>\r\n    | SetTodolistsActionType\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {ActionsTypeAppError, ActionsTypeAppStatus, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | ActionsTypeAppStatus>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType | ActionsTypeAppStatus>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType | ActionsTypeAppStatus |ActionsTypeAppError>) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            if(res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            }else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n            }\r\n\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType | ActionsTypeAppStatus>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    entityStatus:RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                entityStatus={tl.entityStatus}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string|null>(state=>state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                Error message 😠 {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography, LinearProgress} from '@mui/material';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {AppRootStateType} from \"./store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {/*<Typography variant=\"h6\">*/}\r\n                    {/*    News*/}\r\n                    {/*</Typography>*/}\r\n                    {/*<Button color=\"inherit\">Login</Button>*/}\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {status === \"loading\" &&\r\n            <LinearProgress color={'secondary'}/>\r\n            }\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}